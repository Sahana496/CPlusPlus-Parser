FIRST(Z):
#
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
namespace
FIRST(Translation_unit):
#
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
namespace
FIRST(Declaration_seq):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
namespace
FIRST(Declaration):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
namespace
FIRST(Block_declaration):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
FIRST(Simple_declaration):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
FIRST(Declaration_specifiers):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
FIRST(Declaration_specifiers_seq):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
FIRST(Storage_class_specifier):
extern
static
auto
register
FIRST(Function_specifier):
inline
virtual
explicit
FIRST(Typedef_name):
identifier
FIRST(Class_name):
identifier
FIRST(Type_specifier):
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
FIRST(Type_name):
identifier
FIRST(Namespace_name):
identifier
FIRST(Original_namespace_name):
identifier
FIRST(Namespace_alias):
identifier
FIRST(Namespace_definition):
namespace
FIRST(Named_namespace_definition):
namespace
FIRST(Original_namespace_definition):
namespace
FIRST(Extension_namespace_definition):
namespace
FIRST(Unnamed_namespace_definition):
namespace
FIRST(Namespace-body):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
namespace
@
FIRST(Using_directive):
using
FIRST(Init_declarator_list):
*
identifier
(
FIRST(Init_declarator):
*
identifier
(
FIRST(Declarator):
*
identifier
(
FIRST(Direct_declarator):
identifier
(
FIRST(Pointer):
*
FIRST(Cv_qualifier_list):
const
volatile
FIRST(Cv_qualifier):
const
volatile
FIRST(Type_id):
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
FIRST(Type_specifier_seq):
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
FIRST(Abstract_declarator):
*
(
[
FIRST(Direct_abstract_declarator):
(
[
FIRST(Parameter_declaration_clause):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
FIRST(Parameter_declaration_list):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
FIRST(Parameter_declaration):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
FIRST(Function_definition):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
FIRST(Initializer):
{
FIRST(Initializer_list):
{
FIRST(Class_specifier):
class
struct
union
FIRST(Class_head):
class
struct
union
FIRST(Class_key):
class
struct
union
FIRST(Member_specification):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
:
;
private
public
protected
FIRST(Member_declaration):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
:
;
FIRST(Member_declarator_list):
*
identifier
(
:
FIRST(Member_declarator):
*
identifier
(
:
FIRST(Base_clause):
:
FIRST(Base_specifier_list):
::
identifier
virtual
private
public
protected
FIRST(Base_specifier):
::
identifier
virtual
private
public
protected
FIRST(Access_specifier):
private
public
protected
FIRST(Identifier_list):
identifier
FIRST(Statement):
identifier
case
default
{
;
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
throw
if
switch
while
do
for
goto
continue
break
return
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
using
try
FIRST(Labeled_statement):
identifier
case
default
FIRST(Compound_statement):
{
FIRST(Declaration_list):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
namespace
FIRST(Statement_list):
identifier
case
default
{
;
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
throw
if
switch
while
do
for
goto
continue
break
return
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
using
try
FIRST(Expression_statement):
;
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
throw
FIRST(Selection_statement):
if
switch
FIRST(Iteration_statement):
while
do
for
FIRST(Jump_statement):
goto
continue
break
return
FIRST(Declaration_statement):
extern
static
auto
register
inline
virtual
explicit
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
friend
typedef
*
identifier
(
;
using
FIRST(Try_block):
try
FIRST(Function_try_block):
try
FIRST(Handler_seq):
catch
FIRST(Handler):
catch
FIRST(Exception_declaration):
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
...
FIRST(Throw_expression):
throw
FIRST(Exception_specification):
throw
FIRST(Type_id_list):
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
FIRST(Primary_expression):
identifier
constant
string_literal
(
this
::
FIRST(Nested_name_specifier):
identifier
FIRST(Class-or-namespace-name):
identifier
FIRST(Postfix_expression):
identifier
constant
string_literal
(
this
::
FIRST(Argument_expression_list):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
throw
FIRST(Unary_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Unary_operator):
&
*
+
-
~
!
FIRST(New_expression):
new
FIRST(New_placement):
(
FIRST(New_type_id):
void
char
short
int
long
float
double
signed
bool
unsigned
type_name
class
struct
union
const
volatile
FIRST(New_declarator):
*
[
FIRST(Direct_new_declarator):
[
FIRST(New_initializer):
(
FIRST(Delete_expression):
::
delete
FIRST(Cast_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Multiplicative_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Additive_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Shift_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Relational_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Equality_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(And_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Exclusive_or_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Inclusive_or_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Logical_and_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Logical_or_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Conditional_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Assignment_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
throw
FIRST(Assignment_operator):
=
mul_assign
div_assign
mod_assign
add_assign
sub_assign
left_assign
right_assign
and_assign
or_assign
xor_assign
FIRST(Expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
throw
FIRST(Constant_expression):
identifier
constant
string_literal
(
this
::
inc_op
dec_op
&
*
+
-
~
!
sizeof
new
delete
FIRST(Preprocessing_token):
<
"
identifier
constant
.
string_literal
FIRST(Header_name):
<
"
FIRST(Pp-number):
constant
.
FIRST(Preprocessing_file):
#
FIRST(Preprocessing):
@
FIRST(Group):
#
FIRST(Group_part):
#
FIRST(Control_line):
#
FIRST(Replacement_list):
<
"
identifier
constant
.
string_literal
@
FIRST(Pp_tokens):
<
"
identifier
constant
.
string_literal
